print(i);
}
}
broData$technology <- technology
broData;
}
annotateForUsers <- function(userDirList) {
userInfoTable <- getUserOSData();
ipData <- getIPData();
for (userDir in userDirList) {
userName <- basename(userDir)
print (userName)
userInfo <- userInfoTable[userInfoTable$userID == userName, ];
if (nrow(userInfo) != 1) {
print (paste("Error in getting the info for user ", userName));
return(NA);
}
for (logName in c("/conn.log", "/http.log", "/ssl.log", "/dns.log")) {
fName <- paste(userDir, logName, sep="")
print (fName)
if (file.exists(fName) == FALSE) {
print(fName);
next;
}
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
if (nrow(broData) < 10) {
print(fName);
next;
}
broData <- annotateBroDataWithAccessTechnology(ipData, broData, broData$id.orig_h, broData$id.resp_h)
broData <- annotateBroDataWithUserInfo(userInfo, broData)
fName <- paste(fName, ".ann", sep="")
print(fName)
write.table(broData, fName, col.names=TRUE, row.names=FALSE)
}
}
return(TRUE);
}
userLogDir <- list.dirs(broLogsDir, recursive=FALSE)
tmp <- c(userLogDir[18])
tmp
annotateForUsers(tmp)
globalIPHash <- NULL;
getTechnologyFromIP <- function(strIP, ipData) {
# Given the string, check if the IP belongs to a given network
technology <- globalIPHash[strIP]
if (is.null(technology)) {
entry <- ipData[bitAnd(ipData$ip_subnet, getIPFromString(strIP)) == ipData$ip_network, ];
technology <- gUnknownStr
if (nrow(entry) > 0) {
technology <- entry[1,]$technology
}
globalIPHash[strIP] <<- technology;
}
technology;
}
annotateForUsers(tmp)
getTechnologyFromIP <- function(strIP, ipData) {
# Given the string, check if the IP belongs to a given network
technology <- globalIPHash[strIP]
if (is.null(technology)) {
entry <- ipData[bitAnd(ipData$ip_subnet, getIPFromString(strIP)) == ipData$ip_network, ];
technology <- gUnknownStr
if (nrow(entry) > 0) {
technology <- entry[1,]$technology
}
globalIPHash[strIP] <<- technology;
}
print(paste(strIP, technology));
technology;
}
annotateForUsers(tmp)
ipDataDir
ipData
ipData <- getIPData();
x<-getTechnologyFromIP("172.28.7.40", ipData)
x
viewData(ipData)
globalIPHash["72.28.7.40"]
globalIPHash["172.28.7.40"]
globalIPHash["172.28.1"]
globalIPHash["abc"]
is.na(globalIPHash["abc"])
globalIPHash <- NULL;
getTechnologyFromIP <- function(strIP, ipData) {
# Given the string, check if the IP belongs to a given network
technology <- globalIPHash[strIP]
if (is.na(technology)) {
entry <- ipData[bitAnd(ipData$ip_subnet, getIPFromString(strIP)) == ipData$ip_network, ];
technology <- gUnknownStr
if (nrow(entry) > 0) {
technology <- entry[1,]$technology
}
globalIPHash[strIP] <<- technology;
}
print(paste(strIP, technology));
technology;
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
getTechnologyFromIP <- function(strIP, ipData) {
# Given the string, check if the IP belongs to a given network
#technology <- globalIPHash[strIP]
#if (is.na(technology)) {
entry <- ipData[bitAnd(ipData$ip_subnet, getIPFromString(strIP)) == ipData$ip_network, ];
technology <- gUnknownStr
if (nrow(entry) > 0) {
technology <- entry[1,]$technology
}
#  globalIPHash[strIP] <<- technology;
#}
print(paste(strIP, technology));
technology;
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
annotateBroDataWithAccessTechnology<-function(ipData, broData, srcIPCol, dstIPCol)
{
i<-1;
nRows <- nrow(broData);
technology <- rep(gUnknownStr, nrow(broData))
prevIP <- "";
prevTech <- "Unknown";
for (entry in srcIPCol) {
if(entry == prevIP) {
tmpTech <- prevTech
} else{
if(prevIP == dstIPCol[i]) {
tmpTech <- prevTech
} else {
# Get the technology and update the prev*
tmpTech <- getTechnologyFromIP(entry, ipData)
print(paste(entry, tmpTech))
if (tmpTech == "Unknown") {
tmpTech <- getTechnologyFromIP(dstIPCol[i], ipData)
if(tmpTech == "Unknown") {
#            unknownIPs[uc, ] <- c(entry, respIPLst[i])
#            uc <- uc + 1;
prevIP <- entry;
} else {
prevIP <- respIPLst[i]
}
} else {
prevIP <- entry;
}
prevTech <- tmpTech
}
}
# We found the technlogy for the entry
technology[i] <- tmpTech;
i<-i+1;
if (i%%10000 == 0) {
print(i);
}
}
broData$technology <- technology
broData;
}
annotateForUsers(tmp)
annotateBroDataWithAccessTechnology<-function(ipData, broData, srcIPCol, dstIPCol)
{
i<-1;
nRows <- nrow(broData);
technology <- rep(gUnknownStr, nrow(broData))
prevIP <- "";
prevTech <- "Unknown";
for (entry in srcIPCol) {
if(entry == prevIP) {
tmpTech <- prevTech
} else{
if(prevIP == dstIPCol[i]) {
tmpTech <- prevTech
} else {
# Get the technology and update the prev*
tmpTech <- getTechnologyFromIP(entry, ipData)
print(paste(entry, tmpTech))
if (tmpTech == "Unknown") {
tmpTech <- getTechnologyFromIP(dstIPCol[i], ipData)
if(tmpTech == "Unknown") {
#            unknownIPs[uc, ] <- c(entry, respIPLst[i])
#            uc <- uc + 1;
prevIP <- entry;
} else {
prevIP <- dstIPLst[i]
}
} else {
prevIP <- entry;
}
prevTech <- tmpTech
}
}
# We found the technlogy for the entry
technology[i] <- tmpTech;
i<-i+1;
if (i%%10000 == 0) {
print(i);
}
}
broData$technology <- technology
broData;
}
getTechnologyFromIP <- function(strIP, ipData) {
# Given the string, check if the IP belongs to a given network
#technology <- globalIPHash[strIP]
#if (is.na(technology)) {
entry <- ipData[bitAnd(ipData$ip_subnet, getIPFromString(strIP)) == ipData$ip_network, ];
technology <- gUnknownStr
if (nrow(entry) > 0) {
technology <- entry[1,]$technology
}
#  globalIPHash[strIP] <<- technology;
#}
#print(paste(strIP, technology));
technology;
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
annotateBroDataWithAccessTechnology<-function(ipData, broData, srcIPCol, dstIPCol)
{
i<-1;
nRows <- nrow(broData);
technology <- rep(gUnknownStr, nrow(broData))
prevIP <- "";
prevTech <- "Unknown";
for (entry in srcIPCol) {
if(entry == prevIP) {
tmpTech <- prevTech
} else{
if(prevIP == dstIPCol[i]) {
tmpTech <- prevTech
} else {
# Get the technology and update the prev*
tmpTech <- getTechnologyFromIP(entry, ipData)
print(paste(entry, tmpTech))
if (tmpTech == "Unknown") {
tmpTech <- getTechnologyFromIP(dstIPCol[i], ipData)
if(tmpTech == "Unknown") {
#            unknownIPs[uc, ] <- c(entry, respIPLst[i])
#            uc <- uc + 1;
prevIP <- entry;
} else {
prevIP <- dstIPCol[i]
}
} else {
prevIP <- entry;
}
prevTech <- tmpTech
}
}
# We found the technlogy for the entry
technology[i] <- tmpTech;
i<-i+1;
if (i%%10000 == 0) {
print(i);
}
}
broData$technology <- technology
broData;
}
annotateForUsers(tmp)
fName <- paste(tmp[1], "/conn.log.ann", sep="")
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
broData <- read.table(fName, header=T, fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
annotateForUsers <- function(userDirList) {
userInfoTable <- getUserOSData();
ipData <- getIPData();
for (userDir in userDirList) {
userName <- basename(userDir)
print (userName)
userInfo <- userInfoTable[userInfoTable$userID == userName, ];
if (nrow(userInfo) != 1) {
print (paste("Error in getting the info for user ", userName));
return(NA);
}
for (logName in c("/conn.log", "/http.log", "/ssl.log", "/dns.log")) {
fName <- paste(userDir, logName, sep="")
print (fName)
if (file.exists(fName) == FALSE) {
print(fName);
next;
}
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
if (nrow(broData) < 10) {
print(fName);
next;
}
broData <- annotateBroDataWithAccessTechnology(ipData, broData, broData$id.orig_h, broData$id.resp_h)
broData <- annotateBroDataWithUserInfo(userInfo, broData)
fName <- paste(fName, ".ann", sep="")
print(fName)
write.table(broData, fName, sep="\t", quote="", col.names=TRUE, row.names=FALSE)
}
}
return(TRUE);
}
annotateForUsers(tmp)
annotateForUsers <- function(userDirList) {
userInfoTable <- getUserOSData();
ipData <- getIPData();
for (userDir in userDirList) {
userName <- basename(userDir)
print (userName)
userInfo <- userInfoTable[userInfoTable$userID == userName, ];
if (nrow(userInfo) != 1) {
print (paste("Error in getting the info for user ", userName));
return(NA);
}
for (logName in c("/conn.log", "/http.log", "/ssl.log", "/dns.log")) {
fName <- paste(userDir, logName, sep="")
print (fName)
if (file.exists(fName) == FALSE) {
print(fName);
next;
}
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
if (nrow(broData) < 10) {
print(fName);
next;
}
broData <- annotateBroDataWithAccessTechnology(ipData, broData, broData$id.orig_h, broData$id.resp_h)
broData <- annotateBroDataWithUserInfo(userInfo, broData)
fName <- paste(fName, ".ann", sep="")
print(fName)
write.table(broData, fName, sep="\t", col.names=TRUE, row.names=FALSE)
}
}
return(TRUE);
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
fName <- paste(tmp[1], "/conn.log.ann", sep="")
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
cols(broData)
col(broData)
cols(broData)
?cols
colnames(broData)
annotateForUsers <- function(userDirList) {
userInfoTable <- getUserOSData();
ipData <- getIPData();
for (userDir in userDirList) {
userName <- basename(userDir)
print (userName)
userInfo <- userInfoTable[userInfoTable$userID == userName, ];
if (nrow(userInfo) != 1) {
print (paste("Error in getting the info for user ", userName));
return(NA);
}
for (logName in c("/conn.log", "/http.log", "/ssl.log", "/dns.log")) {
fName <- paste(userDir, logName, sep="")
print (fName)
if (file.exists(fName) == FALSE) {
print(fName);
next;
}
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
if (nrow(broData) < 10) {
print(fName);
next;
}
broData <- annotateBroDataWithAccessTechnology(ipData, broData, broData$id.orig_h, broData$id.resp_h)
broData <- annotateBroDataWithUserInfo(userInfo, broData)
fName <- paste(fName, ".ann", sep="")
print(fName)
write.table(broData, fName, sep="\t", col.names=colnames(broData), row.names=FALSE)
}
}
return(TRUE);
}
annotateForUsers(tmp)
fName <- paste(tmp[1], "/conn.log.ann", sep="")
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
annotateBroDataWithAccessTechnology<-function(ipData, broData, srcIPCol, dstIPCol)
{
i<-1;
nRows <- nrow(broData);
technology <- rep(gUnknownStr, nrow(broData))
prevIP <- "";
prevTech <- "Unknown";
for (entry in srcIPCol) {
if(entry == prevIP) {
tmpTech <- prevTech
} else{
if(prevIP == dstIPCol[i]) {
tmpTech <- prevTech
} else {
# Get the technology and update the prev*
tmpTech <- getTechnologyFromIP(entry, ipData)
print(paste(entry, tmpTech))
if (tmpTech == "Unknown") {
tmpTech <- getTechnologyFromIP(dstIPCol[i], ipData)
if(tmpTech == "Unknown") {
#            unknownIPs[uc, ] <- c(entry, respIPLst[i])
#            uc <- uc + 1;
prevIP <- entry;
} else {
prevIP <- dstIPCol[i]
}
} else {
prevIP <- entry;
}
prevTech <- tmpTech
}
}
# We found the technlogy for the entry
technology[i] <- tmpTech;
i<-i+1;
if (i%%10000 == 0) {
print(i);
}
}
broData$technology <- technology
print(technology)
broData;
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
broData[broData$technology == gUnknownStr,]
broData[broData$X.technology == gUnknownStr,]
broData[broData$X.technology == gWifiStr,]
colnames(broData)
c(colnames(broData))
annotateForUsers <- function(userDirList) {
userInfoTable <- getUserOSData();
ipData <- getIPData();
for (userDir in userDirList) {
userName <- basename(userDir)
print (userName)
userInfo <- userInfoTable[userInfoTable$userID == userName, ];
if (nrow(userInfo) != 1) {
print (paste("Error in getting the info for user ", userName));
return(NA);
}
for (logName in c("/conn.log", "/http.log", "/ssl.log", "/dns.log")) {
fName <- paste(userDir, logName, sep="")
print (fName)
if (file.exists(fName) == FALSE) {
print(fName);
next;
}
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
if (nrow(broData) < 10) {
print(fName);
next;
}
broData <- annotateBroDataWithAccessTechnology(ipData, broData, broData$id.orig_h, broData$id.resp_h)
broData <- annotateBroDataWithUserInfo(userInfo, broData)
print(colnames(broData))
fName <- paste(fName, ".ann", sep="")
print(fName)
write.table(broData, fName, sep="\t", col.names=c(colnames(broData)), row.names=FALSE)
}
}
return(TRUE);
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
fName <- paste(tmp[1], "/conn.log.ann", sep="")
fName <- paste(tmp[1], "/conn.log.ann", sep="")
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
annotateForUsers <- function(userDirList) {
userInfoTable <- getUserOSData();
ipData <- getIPData();
for (userDir in userDirList) {
userName <- basename(userDir)
print (userName)
userInfo <- userInfoTable[userInfoTable$userID == userName, ];
if (nrow(userInfo) != 1) {
print (paste("Error in getting the info for user ", userName));
return(NA);
}
for (logName in c("/conn.log", "/http.log", "/ssl.log", "/dns.log")) {
fName <- paste(userDir, logName, sep="")
print (fName)
if (file.exists(fName) == FALSE) {
print(fName);
next;
}
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
if (nrow(broData) < 10) {
print(fName);
next;
}
broData <- annotateBroDataWithAccessTechnology(ipData, broData, broData$id.orig_h, broData$id.resp_h)
broData <- annotateBroDataWithUserInfo(userInfo, broData)
print(colnames(broData))
fName <- paste(fName, ".ann", sep="")
print(fName)
write.table(broData, fName, sep="\t", quote=F, col.names=c(colnames(broData)), row.names=FALSE)
}
}
return(TRUE);
}
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
fName <- paste(tmp[1], "/conn.log.ann", sep="")
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
userLogDir <- list.dirs(broLogsDir, recursive=FALSE)
tmp <- c(userLogDir[18])
annotateForUsers(tmp)
fName <- paste(tmp[1], "/http.log.ann", sep="")
broData <- read.table(fName, header=T, sep="\t", fill=TRUE, stringsAsFactors=FALSE, quote=""); # Note FILL causes silent padding
viewData(broData)
userLogDir <- list.dirs(broLogsDir, recursive=FALSE)
annotateForUsers(userLogDir)

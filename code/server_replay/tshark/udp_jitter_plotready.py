'''
#######################################################################################################
#######################################################################################################

by: Hyungjoon Koo (hykoo@cs.stonybrook.edu)
    Stony Brook University

Goal: Make UDP jitter calculation ready from server side

Required package
    (*) dpkt (https://code.google.com/p/dpkt/)

Usage:
    python udp_jitter_ready.py --pcap_folder=[]

Pre-condition:
    The current directory must contain a single "_out.pcap" generated by "udp_parser.py"
    The file will be moved into "UDP_PCAP_DIR" in order to prepare for plot generation
    
Example:
    python udp_jitter_plotready.py --pcap_folder=./udp

#######################################################################################################
#######################################################################################################
'''
import sys
import time
from python_lib import *
import dpkt
import socket
import commands
import subprocess

DEBUG = 0

PCAP_DIR = '../../analysis_replay/data/pcaps'
UDP_PCAP_DIR = '../../analysis_replay/data/pcaps/udp'
PLOT_DIR = '../../analysis_replay/data/pcaps/generated_plots2'	# Directory where result files reside in
TXT_PCAP_DIR = '../../analysis_replay/data/pcaps/text_pcaps'	# Directory where tshark output reside in
SVR_SENT = "server_sent.txt"
SVR_RCVD = "server_rcvd.txt" 
SVR_SENT_INTVL = "server_sent_interval.txt"
SVR_RCVD_INTVL = "server_rcvd_interval.txt"
CLT_SENT_INTVL = "client_sent_interval_rcvd.txt"
CLT_RCVD_INTVL = "client_rcvd_interval_rcvd.txt"
SVR_JITTER = "server_jitter.txt"
CLT_JITTER = "client_jitter.txt"

# Extracts two files containing the packets which server sent and which received from client respectively
def splitPcap2(outDir, file_name, client, server):
    split_cs = ("tshark -r \"" + UDP_PCAP_DIR + "/" + file_name + "\" | grep \"" + client + " -> " + server + "\" > " + outDir + "/" + SVR_RCVD)
    os.system(split_cs)
    split_sc = ("tshark -r \"" + UDP_PCAP_DIR + "/" + file_name + "\" | grep \"" + server + " -> " + client + "\" > " + outDir + "/" + SVR_SENT)
    os.system(split_sc)
    
# UDP Jitter calculation
# Si: the timestamp from packet i, 
# Ri: the time of arrival in RTP timestamp units for packet i, 
# J: the interarrival between two packets i and j,
# J(i,j) = (Rj - Ri) - (Sj - Si) = (Rj - Sj) - (Ri - Si)
# Output is in milliseconds

def udpDelay2(outDirectory):
    f1 = open(outDirectory + "/" + CLT_SENT_INTVL, 'r')
    f2 = open(outDirectory + "/" + SVR_RCVD_INTVL, 'r')
    f3 = open(outDirectory + "/" + SVR_SENT_INTVL, 'r')
    f4 = open(outDirectory + "/" + CLT_RCVD_INTVL, 'r')

    interval1 = [line.rstrip() for line in f1]
    interval2 = [line.rstrip() for line in f2]
    interval3 = [line.rstrip() for line in f3]
    interval4 = [line.rstrip() for line in f4]
    
    num_client_sent = len(interval1) + 1
    num_server_rcvd = len(interval2) + 1
    lossRateCS = 100.0 - (float(num_server_rcvd)/float(num_client_sent))*100
    print "\tProcessing delay at server..."
    if lossRateCS < 0:
        print "\t\tLoss Rate = %3.2f%% (%d / %d)" % (lossRateCS, num_server_rcvd, num_client_sent) + "<--WHAT?? SOMETHING IS WRONG!"
    else:
        print "\t\tLoss Rate = %3.2f%% (%d / %d)" % (lossRateCS, num_server_rcvd, num_client_sent)
    print "\t\tClient has sent " + str(num_client_sent) + " UDP packets and",
    print "server has received " + str(num_server_rcvd)+ " UDP packets."

    jiiterAtServer = []
    for x in range(0,len(interval1)-1) if len(interval1) <= len(interval2) else range(0,len(interval2)-1):
        jiiterAtServer.append(format_float(abs(1000*(float(interval2[x])-float(interval1[x]))),15))
    
    f_jiiterAtServer = open(outDirectory + '/' + SVR_JITTER ,'w')
    for delay in range(0, len(jiiterAtServer)):
        f_jiiterAtServer.write(jiiterAtServer[delay]+'\n')
    f1.close()
    f2.close()

    num_server_sent = len(interval3) + 1
    num_client_rcvd = len(interval4) + 1
    lossRateSC = 100.0 - (float(num_client_rcvd)/float(num_server_sent))*100
    print "\tProcessing delay at client..."
    if lossRateSC < 0:
        print "\t\tLoss Rate = %3.2f%% (%d / %d)" % (lossRateSC, num_client_rcvd, num_server_sent) + "<--WHAT?? SOMETHING IS WRONG!"
    else:
        print "\t\tLoss Rate = %3.2f%% (%d / %d)" % (lossRateSC, num_client_rcvd, num_server_sent)
    print "\t\tClient has sent " + str(num_server_sent) + " UDP packets and",
    print "server has received " + str(num_client_rcvd)+ " UDP packets."

    jiiterAtClient = []
    f_jiiterAtClient = open(outDirectory + '/' + CLT_JITTER, 'w')
    for x in range(0,len(interval3)-1) if len(interval3) <= len(interval4) else range(0,len(interval4)-1):
        jiiterAtClient.append(format_float(abs(1000*(float(interval4[x])-float(interval3[x]))),15))

    for delay in range(0, len(jiiterAtClient)):
        f_jiiterAtClient.write(jiiterAtClient[delay]+'\n')
    f3.close()
    f4.close()

def extractEndpoints2(out_dir, file_name):
	extract = ("tshark -Tfields -E separator=- -e ip.src -e ip.dst -r " + UDP_PCAP_DIR + "/" + file_name +" | head -1 > " + out_dir + "/endpoints.txt")
	os.system(extract)
	with open(out_dir + "/endpoints.txt",'r') as f:
		ends = f.read().splitlines()
	f.close()
	return ends[0].split("-")

def parsedPktCnt2(out_dir, file):
	pktCntCmd = ("cat " + out_dir + "/" + file + " " + " | wc -l")
	import commands
	pktCnt = commands.getoutput(pktCntCmd)
	return pktCnt
	
def getTimestamp2(out_dir, file):
	getTimestampCmd = ("cat " + out_dir + "/" + file + " | awk '{print $2}' > " + out_dir + "/" + "ts_" + file + ".tmp")
	os.system(getTimestampCmd)
	
# Saves the inter-packet intervals between when to sent
def interPacketSentInterval2(out_dir, file):
	tmp = open(out_dir + '/ts_' + file + '.tmp','r')
	timestamps = tmp.read().splitlines()
	intervals = []
	i = 0
	ts_cnt = len(timestamps)
	while (i < ts_cnt - 1):
		intervals.append(format_float(float(timestamps[i+1]) - float(timestamps[i]),15))
		i = i + 1
	f = open(out_dir + '/' + file.split('.txt')[0] + '_interval.txt', 'w')
	f.write('\n'.join(str(ts) for ts in intervals))
	os.system('rm -f ' + out_dir + '/ts_' + file + '.tmp')
	
# Generate appropriate files to draw jitter CDF graph
# The "analyzer.py" would have it done

def plotReady():
    PRINT_ACTION('Getting the server pcap file while replaying.', 0)
    configs = Configs()
    configs.read_args(sys.argv)
    configs.is_given('pcap_folder')
    configs.show_all()
		
    pcap_dir = configs.get('pcap_folder')
    if os.path.isdir(PCAP_DIR) == False:
        os.mkdir(PCAP_DIR)
    if os.path.isdir(TXT_PCAP_DIR) == False:
        os.mkdir(TXT_PCAP_DIR)
    if os.path.isdir(UDP_PCAP_DIR) == False:
        os.mkdir(UDP_PCAP_DIR)
    if os.path.isdir(PLOT_DIR) == False:
        os.mkdir(PLOT_DIR)
		
    pcap_files = []
    for pcap_file in os.listdir('.'):
        if pcap_file.endswith('_out.pcap'):
			outDirectory = PLOT_DIR + "/" + pcap_file.split('.pcap')[0]
			if os.path.isdir(outDirectory) == False:
				os.mkdir(outDirectory)
			pcap_files.append(os.path.abspath('.') + '/' + pcap_file)
			print "\tMoving " + pcap_file + " to " +  UDP_PCAP_DIR
			os.system("mv ./" + pcap_file + " " + UDP_PCAP_DIR + "/" + pcap_file)

    if len(pcap_files) == 0:
        print '\tThis directory does not contain any "*_out.pcap" file while replaying!'
        sys.exit()
    else:
        (absolute_path, file_name) = os.path.split(pcap_files[0])
		
    PRINT_ACTION('Extracting client/server packets from two endpoints respectively. (IP might be different due to NAT/PAT.)',0)
    if DEBUG == 2: print "\tTarget file: " + file_name
    endpoints = extractEndpoints2(outDirectory, file_name)
    client = endpoints[0]
    server = endpoints[1]
    print "\t" + "Client: " + client + " <-> Server: " + server + " from server side"
    splitPcap2(outDirectory, file_name, client, server)
    
    PRINT_ACTION('Counting all UDP Packets on server side.',0)
    print "\t# of UDP packets collected on server side: " + str(pkt_ctr(UDP_PCAP_DIR, file_name, 'udp'))
    
    PRINT_ACTION('Getting the delay from parsed UDP Packets on server side.',0)
    print "\tThere are " + parsedPktCnt2(outDirectory, SVR_SENT) + " packets which server has successfully sent."
    print "\tThere are " + parsedPktCnt2(outDirectory, SVR_RCVD) + " packets which server has successfully received."
    
    PRINT_ACTION('Getting inter-packet timestamps UDP Packets on server side.',0)
    getTimestamp2(outDirectory, SVR_SENT)
    interPacketSentInterval2(outDirectory, SVR_SENT)
    print "\t" + SVR_SENT_INTVL + " has been created!"
    getTimestamp2(outDirectory, SVR_RCVD)
    interPacketSentInterval2(outDirectory, SVR_RCVD)
    print "\t" + SVR_RCVD_INTVL + " has been created!"

    PRINT_ACTION('Calculating the interPacketIntervals at bothendpoints',0)
    os.system("cp " + pcap_dir + "/" + CLT_SENT_INTVL + " " + outDirectory + "/" + CLT_SENT_INTVL)
    os.system("cp " + pcap_dir + "/" + CLT_RCVD_INTVL + " " + outDirectory + "/" + CLT_RCVD_INTVL)
    udpDelay2(outDirectory)

    PRINT_ACTION('Done...!!',0)
    
if __name__== '__main__' :
	'''
    if len(sys.argv) < 2:
        print "Usage: " + sys.argv[0] + " --pcap_folder = [YOUR_PCAP_FOLDER]"
        print '\tThe current directory must contain a single "_out.pcap" generated by "udp_parser.py"'
        print '\tThis file will be moved into "UDP_PCAP_DIR" in order to prepare for plot generation'
        sys.exit()
	'''
	plotReady()